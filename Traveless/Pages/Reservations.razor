@page "/reservations"
@using Traveless.Data
@using System.Text;

<h3 style="text-align: center;">Reservation Finder</h3>

<div style="display: flex; justify-content: space-between; align-items: center;">
    <div>
        <label for="reservationCode" style="display: block;">Code</label>
        <input type="text" id="reservationCode" @bind="@ReservationCode" placeholder="Code" />
    </div>
    <div>
        <label for="airline" style="display: block;">Airline</label>
        <input type="text" id="airline" @bind="@Airline" placeholder="Airline" />
    </div>
    <div>
        <label for="Name" style="display: block;">Name</label>
        <input type="text" id="name" @bind="@Name" placeholder="Name" />
    </div>
    <div>
        <button @onclick="FindReservation" style="background-color: blue; color: white; width: 200px; margin-top: 20px;">Find Reservations</button>
    </div>
</div>

<h3 style="margin-top: 20px; text-align: center;">Reservations</h3>

<div style="border: 1px solid black; height: 30px;">
    @if (MatchingReservations != null && MatchingReservations.Any())
    {
        @foreach (var reservation in MatchingReservations)
        {
            <p>@reservation.ReservationCode, @reservation.FlightNumber, @reservation.Airline, @reservation.Price, @reservation.Name, @reservation.Citizenship, @reservation.Status</p>
        }

    }
    else if (MatchingReservations != null && !MatchingReservations.Any())
    {
        <p>No matching flights found.</p>
    }
</div>

<h3 style="margin-top: 50px; text-align: center;">Reserve</h3>
<div>
    <label for="reservedCode" style="display: block;">Reservation Code</label>
    <input type="text" id="reservationCode" readonly value="@ReservationCode" placeholder="Code" style="width: 100%;" />

    <label for="reservedFlightCode" style="display: block;">Flight Code</label>
    <input type="text" id="flightcode" readonly value="@FlightCode" placeholder="Flight" style="width: 100%;" />

    <label for="reservedAirline" style="display: block;">Airline</label>
    <input type="text" id="airline" readonly value="@Airline" placeholder="Airline" style="width: 100%;" />

    <label for="reservedPrice" style="display: block;">Cost</label>
    <input type="text" id="cost" readonly value="@Cost" placeholder="0" style="width: 100%;" />

    <label for="reservedName" style="display: block;">Name</label>
    <input type="text" id="name" @bind="@Name" placeholder="Name" style="width: 100%;" />

    <label for="time" style="display: block;">Citizenship</label>
    <input type="text" id="citizenship" @bind="@Citizenship" placeholder="Citizenship" style="width: 100%;" />

    <label for="status" style="display: block;">Status</label>
    <input type="text" id="status" @bind="@Status" style="width: 100%;" />
    <div style="display: flex; flex-direction: column; align-items: center; margin-top: 30px;">
        <button @onclick="UpdateReservation" style="background-color: blue; color: white; width: 200px;">Update</button>
    </div>
</div>
<div style="text-align: center; margin-top: 10px;">
    @if (!string.IsNullOrEmpty(NewReservationCode))
    {
        <p>Updated! New Reservation Code: @NewReservationCode</p>
    }
</div>


@code {
    private List<Reservation> MatchingReservations { get; set; }
    private ReservationManager ReservationManager { get; set; }
    private string ReservationCode { get; set; }
    private string Airline { get; set; }
    private string Name { get; set; }
    private string FlightCode { get; set; }
    private string Cost { get; set; }
    private string Citizenship { get; set; }
    private string Status { get; set; }
    private string NewReservationCode { get; set; }


    private void FindReservation()
    {
        var reservationManager = new ReservationManager("reservations.csv");
        MatchingReservations = reservationManager.FindReservations(ReservationCode, Airline, Name);
        if (MatchingReservations != null && MatchingReservations.Any())
        {
            var reservation = MatchingReservations.First();
            ReservationCode = reservation.ReservationCode;
            FlightCode = reservation.FlightNumber;
            Airline = reservation.Airline;
            Cost = reservation.Price;
            Name = reservation.Name;
            Citizenship = reservation.Citizenship;
            Status = reservation.Status;
        }
    }


    private void UpdateReservation()
    {
        try
        {
            var reservation = MatchingReservations?.FirstOrDefault();
            if (reservation != null)
            {
                bool isNameChanged = reservation.Name != Name;
                bool isCitizenshipChanged = reservation.Citizenship != Citizenship;

                if (isNameChanged || isCitizenshipChanged)
                {
                    reservation.Status = "Inactive"; // Soft-delete the existing reservation
                    if (ReservationManager == null)
                    {
                        ReservationManager = new ReservationManager("reservations.csv");
                    }
                    NewReservationCode = GenerateReservationCode();
                    ReservationManager.AddReservation(new Reservation
                        {
                            ReservationCode = NewReservationCode,
                            Name = Name,
                            Citizenship = Citizenship,
                            FlightNumber = reservation.FlightNumber,
                            Airline = reservation.Airline,
                            DayOfWeek = reservation.DayOfWeek,
                            DepartureTime = reservation.DepartureTime,
                            Price = reservation.Price,
                            Status = "Active"
                        });
                    ReservationManager.SaveReservationsToCsv(ReservationManager.GetReservations()); ; // Save the updated reservations to the CSV file
                }
                else
                {
                    reservation.Name = Name;
                    reservation.Citizenship = Citizenship;
                    reservation.Status = Status;
                    ReservationManager.SaveReservationsToCsv(ReservationManager.GetReservations()); 
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating reservation: {ex.Message}");
        }
    }

    private string GenerateReservationCode()
    {
        // Generate a random letter using ASCII codes (65-90 represent A-Z)
        char letter = (char)(new Random().Next(65, 91));

        // Generate a random 4-digit number
        int number = new Random().Next(1000, 10000);

        // Combine the letter and number to form the reservation code
        return $"{letter}{number}";
    }

}